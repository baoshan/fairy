// Generated by CoffeeScript 1.12.3
(function() {
  var Connect, _, connect, express, math_ceil, router, static_;

  express = require('express');

  router = new express.Router();

  _ = require('underscore');

  static_ = express["static"](__dirname + '/web');

  connect = null;

  module.exports.connect = function(options) {
    if (options == null) {
      options = {};
    }
    connect = new Connect(options);
    return router;
  };

  Connect = (function() {
    var magic_num;

    function Connect(options) {
      this.fairy = require('../.').connect(options);
    }

    Connect.prototype.format_date = function(time) {
      return time.valueOf() / (5 * 60 * 1000);
    };

    Connect.prototype.processing_num = function(tasks) {
      return _(tasks).chain().groupBy((function(_this) {
        return function(arg) {
          var finished;
          finished = arg.finished;
          return Math.ceil(_this.format_date(finished));
        };
      })(this)).map(function(task, key) {
        return {
          time: key,
          value: task.length
        };
      }).value();
    };

    Connect.prototype.merge_draw_data = function(draw_data, barrels) {
      return _(barrels).map(function(task) {
        var repeat_task;
        repeat_task = _.findWhere(draw_data, {
          time: task.time.toString()
        });
        return {
          time: task.time,
          value: (repeat_task != null ? repeat_task.value : void 0) || task.value
        };
      });
    };

    Connect.prototype.processing_avg_num = function(tasks, barrels) {
      var draw_data, work_time;
      return {
        avg_data: (_(draw_data = this.processing_num(tasks)).reduce((function(memo, task) {
          return memo + task.value;
        }), 0)) / (work_time = this.work_sum_time(this.time_maxmin(tasks))),
        draw_data: this.merge_draw_data(_(draw_data).map(function(arg) {
          var minute, time, value;
          time = arg.time, value = arg.value;
          return {
            time: time,
            value: value / (minute = work_time > 5 ? 5 : work_time)
          };
        }), barrels)
      };
    };

    Connect.prototype.processing_group = function(tasks) {
      return _(tasks).chain().groupBy((function(_this) {
        return function(arg) {
          var finished;
          finished = arg.finished;
          return Math.ceil(_this.format_date(finished));
        };
      })(this)).map(function(task, key) {
        return {
          time: key,
          value: _(task).chain().groupBy(function(arg) {
            var params;
            params = arg.params;
            return JSON.stringify(params);
          }).size().value()
        };
      }).value();
    };

    Connect.prototype.processing_avg_group = function(tasks) {
      return (_(this.processing_group(tasks)).reduce((function(memo, task) {
        return memo + task.value;
      }), 0)) / (this.work_sum_time(this.time_maxmin(tasks)));
    };

    Connect.prototype.task_time = function(tasks, minuend_date, percent) {
      return _(tasks).chain().sortBy(function(task) {
        return task.finished.valueOf() - task[minuend_date].valueOf();
      }).initial(Math.ceil(tasks.length * percent)).groupBy((function(_this) {
        return function(arg) {
          var finished;
          finished = arg.finished;
          return Math.ceil(_this.format_date(finished));
        };
      })(this)).map(function(val, key) {
        return {
          time: key,
          value: _(val).reduce((function(memo, task) {
            return memo + task.finished.valueOf() - task[minuend_date].valueOf();
          }), 0),
          count: val.length
        };
      }).value();
    };

    Connect.prototype.time_draw_data = function(draw_data, barrels) {
      return this.merge_draw_data(_(draw_data).map(function(arg) {
        var count, time, value;
        time = arg.time, value = arg.value, count = arg.count;
        return {
          time: time,
          value: value / count
        };
      }), barrels);
    };

    magic_num = function(data) {
      var ref;
      if (data.avg_data / 1000 > 1) {
        data.avg_data = data.avg_data / 1000;
        if ((ref = data.draw_data) != null) {
          ref.forEach(function(value) {
            return value = value / 1000;
          });
        }
        return _.extend(data, {
          unit: 's'
        });
      } else {
        return _.extend(data, {
          unit: 'ms'
        });
      }
    };

    Connect.prototype.task_avg = function(tasks, minuend_date, percent, barrels) {
      var draw_data;
      if (tasks.length === 1) {
        percent = 0;
      }
      return magic_num({
        avg_data: (_(draw_data = this.task_time(tasks, minuend_date, percent)).reduce((function(memo, task) {
          return memo + task.value;
        }), 0)) / Math.ceil(tasks.length * (1 - percent)),
        draw_data: barrels ? this.time_draw_data(draw_data, barrels) : barrels
      });
    };

    Connect.prototype.repair_date = function(time) {
      return parseInt(time) * 5 * 60 * 1000;
    };

    Connect.prototype.work_sum_time = function(arg) {
      var finished, start;
      start = arg.start, finished = arg.finished;
      return (finished - start) / (1000 * 60);
    };

    Connect.prototype.time_maxmin = function(tasks) {
      var finished, start;
      start = _(tasks).min((function(_this) {
        return function(arg) {
          var start;
          start = arg.start;
          return start;
        };
      })(this)).start;
      finished = _(tasks).max((function(_this) {
        return function(arg) {
          var finished;
          finished = arg.finished;
          return finished;
        };
      })(this)).finished;
      return {
        start: start,
        finished: finished
      };
    };

    Connect.prototype.get_darw_time = function() {
      return {
        begin_time: Math.ceil(this.format_date(new Date() - 1000 * 60 * 60 * 24)),
        end_time: Math.ceil(this.format_date(new Date()))
      };
    };

    Connect.prototype.range_time = function() {
      return _(_.range(this.get_darw_time().begin_time, this.get_darw_time().end_time + 1, 1)).map(function(value) {
        return {
          value: 0,
          time: value
        };
      });
    };

    Connect.prototype.busy_work = function(tasks, barrels) {
      tasks.forEach((function(_this) {
        return function(task) {
          var finished, start;
          start = task.start.valueOf();
          finished = task.finished.valueOf();
          return barrels.forEach(function(barrel) {
            var prev, since;
            prev = _this.repair_date(barrel.time - 1);
            since = _this.repair_date(barrel.time);
            if (finished < prev) {
              return false;
            } else if (start < prev && finished >= since) {
              return barrel.value += _this.repair_date(1);
            } else if (start < prev && finished <= since && finished > prev) {
              return barrel.value += finished - prev;
            } else if (finished > since && start > prev && start <= since) {
              return barrel.value += since - start;
            } else if (start > prev && finished <= since) {
              return barrel.value += finished - start;
            }
          });
        };
      })(this));
      return _(barrels).map(function(arg) {
        var time, value;
        value = arg.value, time = arg.time;
        return {
          time: time,
          value: value / (5 * 60 * 1000)
        };
      });
    };

    Connect.prototype.busy_avg_work = function(tasks, barrels) {
      var draw_data;
      return {
        avg_value: (_(draw_data = this.busy_work(tasks, barrels)).reduce((function(memo, task) {
          return memo + task.value;
        }), 0)) / ((this.work_sum_time(this.time_maxmin(tasks))) / 5),
        draw_data: draw_data
      };
    };

    return Connect;

  })();

  math_ceil = function(number) {
    return (Math.ceil(number * 100)) / 100;
  };

  router.use('/', function(req, res, next) {
    if (req.url === '/') {
      req.url = '/fairy.html';
    }
    return static_(req, res, next);
  });

  router.use('/statistics', function(req, res, next) {
    return connect.fairy.statistics(function(err, statistics) {
      var result;
      result = [];
      return statistics.forEach(function(value, index) {
        return connect.fairy.queue(value.name).recently_finished_tasks(new Date().getTime() - 1000 * 60 * 60 * 24, function(err, tasks) {
          var barrels, finished_time_data, finished_time_percent_data, processing_num_data, processing_time_data, processing_time_percent_data, work_data;
          barrels = connect.range_time();
          processing_num_data = connect.processing_avg_num(tasks, barrels);
          processing_time_data = connect.task_avg(tasks, 'start', 0, barrels);
          finished_time_data = connect.task_avg(tasks, 'queued', 0);
          processing_time_percent_data = connect.task_avg(tasks, 'start', 0.02, barrels);
          finished_time_percent_data = connect.task_avg(tasks, 'queued', 0.02);
          work_data = connect.busy_avg_work(tasks, barrels);
          result.push(_.extend(statistics[index], {
            processing_num_avg: (math_ceil(processing_num_data.avg_data)) || '-',
            draw_processing_num_avg: processing_num_data.draw_data,
            processing_group_avg: (math_ceil(connect.processing_avg_group(tasks))) || '-',
            processing_time_avg: (math_ceil(processing_time_data.avg_data)) || '-',
            draw_processing_time_avg: processing_time_data.draw_data,
            processing_time_unit: processing_time_data.unit,
            finished_time_avg: (math_ceil(finished_time_data.avg_data)) || '-',
            finished_time_unit: finished_time_data.unit,
            processing_time_percent_avg: (math_ceil(processing_time_percent_data.avg_data)) || '-',
            processing_percent_unit: processing_time_percent_data.unit,
            draw_processing_percent_avg: processing_time_percent_data.draw_data,
            finished_time_percent_avg: (math_ceil(finished_time_percent_data.avg_data)) || '-',
            finished_time_percent_unit: finished_time_percent_data.unit,
            busy_work_num_avg: (math_ceil(work_data.avg_value)) || '-',
            draw_work_avg: work_data.draw_data
          }));
          if (index === statistics.length - 1) {
            return res.send(result);
          }
        });
      });
    });
  });

  ['recently_finished_tasks', 'failed_tasks', 'blocked_groups', 'workers'].forEach(function(command) {
    return router.use("/detail/:name/" + command, function(req, res, next) {
      return connect.fairy.queue(req.params.name)[command](function(err, statistics) {
        return res.send(statistics);
      });
    });
  });

  ['retry', 'ignore_failed_tasks', 'clear'].forEach(function(command) {
    return router.use("/:name/" + command + "/", function(req, res, next) {
      return connect.fairy.queue(req.params.name)[command](function(err, result) {
        return res.send(result);
      });
    });
  });

}).call(this);
