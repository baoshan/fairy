// Generated by CoffeeScript 1.12.3
(function() {
  var bind_detail_table, create_dom, current_index, draw, height, margin, render_detail, render_master, scroll_to, set_xAxis, task_property, timer, width, x, y, yAxis;

  bind_detail_table = function(name, item_id, is_load) {
    return ['recently_finished_tasks', 'failed_tasks', 'blocked_groups', 'workers'].forEach(function(value) {
      if (is_load) {
        $("#ctx" + item_id).append("<div id='" + value + "_" + item_id + "' class='error_list' ></div>");
      }
      return $("#btn_" + value + "_" + item_id).on('click', {
        name: name,
        value: value,
        item_id: item_id
      }, render_detail);
    });
  };

  render_detail = function(event) {
    var item_id, name, ref, value;
    ref = event.data, name = ref.name, value = ref.value, item_id = ref.item_id;
    return $.get(path_ + "/detail/" + name + "/" + value, function(result) {
      var param;
      param = {};
      param[value] = {
        data: result,
        id: value + "_" + item_id
      };
      $("#" + value + "_" + item_id).html(_.template($("#tb_" + value + "_template").html(), param));
      $("#" + value + "_" + item_id).show();
      $("#" + value + "_" + item_id).find("button[type='button']").on('click', function() {
        return $(this).parent().hide();
      });
      return $("#" + value + "_" + item_id).find("button[type='action']").each(function() {
        return $(this).on('click', function() {
          return $.get(path_ + "/" + name + "/" + ($(this).attr('data-fuc')), function() {
            $("#" + value + "_" + item_id).find('button[type=button]').trigger('click');
            return render_master(false, true);
          });
        });
      });
    });
  };

  margin = {
    top: 20,
    right: 20,
    bottom: 30,
    left: 50
  };

  width = 381 - margin.left - margin.right;

  height = 102 - margin.top - margin.bottom;

  y = d3.scale.linear().range([height, 0]);

  x = d3.scale.linear().range([0, width]);

  yAxis = d3.svg.axis().scale(y).orient("left").tickSize(-width).ticks(2).tickFormat(function(d) {
    return d;
  });

  set_xAxis = function(draw_data) {
    return _(draw_data).chain().groupBy(function(task) {
      return ~~(task.time / 12);
    }).map(function(task, key) {
      return key * 12;
    }).filter(function(time, index) {
      var ref;
      return (ref = moment(time * 5 * 60 * 1000).format('HH')) === '00' || ref === '06' || ref === '12' || ref === '18';
    }).value();
  };

  draw = function(draw_data) {
    var gy, line, svg, svg_g, xAxis, x_arr;
    x_arr = set_xAxis(draw_data);
    xAxis = d3.svg.axis().scale(x).orient("bottom").tickValues(x_arr).tickFormat(function(d) {
      return moment(d * 5 * 60 * 1000).format('HH:mm');
    });
    line = d3.svg.line().x(function(d) {
      return x(d.time);
    }).y(function(d) {
      return y(d.value);
    });
    svg = d3.select(document.createElement('svg'));
    svg_g = svg.attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append('g').attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    x.domain(d3.extent(draw_data, function(d) {
      return d.time;
    }));
    y.domain(d3.extent(draw_data, function(d) {
      return d.value;
    }));
    svg_g.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
    gy = svg_g.append("g").attr("class", "y axis").call(yAxis);
    gy.selectAll("g").filter(function(d) {
      return d;
    }).classed("minor", true);
    gy.selectAll("text").attr("x", 4).attr("dy", -4);
    svg_g.append("path").datum(draw_data).attr("class", "line").attr("d", line(draw_data));
    return svg;
  };

  create_dom = function(render_data, is_load, fetch_time) {
    render_data.forEach(function(item_data, index) {
      return ['draw_processing_num_avg', 'draw_processing_time_avg', 'draw_processing_percent_avg', 'draw_work_avg'].forEach(function(value) {
        item_data[value] = draw(item_data[value]).node().outerHTML;
        item_data.id = index;
        if (is_load) {
          $('#context_template').append("<div id='ctx" + item_data.id + "' class='graphs'></div>");
          $("#ctx" + item_data.id).append("<div id='tb_" + item_data.id + "'></div>");
          $('#context_template').width($('#context_template >').outerWidth() * render_data.length);
          if (fetch_time) {
            timer();
          }
          $("#tb_" + item_data.id).html(_.template($('#dashboard_template').html().toString(), item_data));
          return bind_detail_table(item_data.name, item_data.id, is_load);
        }
      });
    });
    return scroll_to(current_index());
  };

  render_master = function(is_load, fetch_timer) {
    return $.get(path_ + "/statistics", function(render_data) {
      return create_dom(render_data, is_load, fetch_timer);
    });
  };

  $(function() {
    return render_master(true, true);
  });

  timer = function() {
    clearInterval(timer);
    return setInterval(render_master, 20000);
  };

  current_index = function() {
    return $('#context_template').position().left / task_property().context_width;
  };

  task_property = function() {
    return {
      context_width: 0 - $('#context_template >').outerWidth(true),
      task_total: $('#context_template >').length
    };
  };

  scroll_to = function(index) {
    $('#context_template').css('left', task_property().context_width * index);
    $('#button_prev')[index > 0 ? 'show' : 'hide']();
    return $('#button_next')[index < task_property().task_total - 2 ? 'show' : 'hide']();
  };

  $('#button_prev').click(function() {
    return scroll_to(current_index() - 1);
  });

  $('#button_next').click(function() {
    return scroll_to(current_index() + 1);
  });

}).call(this);
